// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable connection pooling for Vercel serverless functions
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  password          String
  userRole          String   @default("user")
  image             String?
  backgroundImage   String?
  backgroundOpacity Float?   @default(0.8)
  emailVerified     DateTime?
  verifyToken       String?   @unique
  verifyTokenExpires DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  passwordReset     PasswordReset?
  magicLinks        MagicLink[]

  // Relations
  brewingSessions   UserBrewSession[]
  brewingDevices    UserBrewingDevice[]
  brewProfiles      BrewProfile[]
  favorites         UserFavorite[]
  dismissedBanners UserDismissedBanner[]
}

// Banner system models
model AdminBanner {
  id          String   @id @default(cuid())
  title       String
  description String
  color       BannerColor @default(neutral)
  isActive    Boolean  @default(true)
  isDismissable Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dismissals  UserDismissedBanner[]
}

model UserDismissedBanner {
  id        String   @id @default(cuid())
  userId    String
  bannerId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  banner    AdminBanner @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, bannerId])
}

enum BannerColor {
  success
  info
  danger
  warning
  neutral
}

model BrewingDevice {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  UserBrewingDevice UserBrewingDevice[]
  UserBrewSession   UserBrewSession[]
  BrewSessionDevice BrewSessionDevice[]
  brewProfiles      BrewProfile[]
}

model UserBrewingDevice {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?
  userId          String
  brewingDeviceId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  brewingDevice BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  brewSessions UserBrewSession[]
}

model UserBrewSession {
  id              String   @id @default(uuid())
  name            String
  notes           String
  userId          String
  brewingDeviceId String
  brewTime        String   // Changed from Decimal to String to store "HH:MM:SS" format
  isFavorite      Boolean  @default(false)
  image           String?  // Added optional image field
  isPublic        Boolean  @default(false) // Add this field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  brewingDevice   BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  UserBrewingDevice UserBrewingDevice[]
  additionalDevices BrewSessionDevice[]
  brewProfileId     String?
  brewProfile       BrewProfile? @relation("BrewProfileToUserBrewSession", fields: [brewProfileId], references: [id])
}

// New model to support multiple brewing devices per session
model BrewSessionDevice {
  id              String   @id @default(cuid())
  brewSessionId   String
  brewingDeviceId String
  createdAt       DateTime @default(now())

  brewSession   UserBrewSession @relation(fields: [brewSessionId], references: [id], onDelete: Cascade)
  brewingDevice BrewingDevice   @relation(fields: [brewingDeviceId], references: [id])

  @@unique([brewSessionId, brewingDeviceId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoffeeRoaster {
  id               String   @id @default(cuid())
  name             String
  address          String?  // Main address (will keep for backward compatibility)
  mapsLink         String?  // Main location maps link
  phoneNumber      String?  // Main phone number
  notes            String?
  image            String?  // Added image field
  website          String?  // Added website field
  hasSingleLocation Boolean @default(false) // Indicates if roaster has only one location (use main info)
  createdBy        String   // userId
  updatedBy        String?  // userId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  coffees          Coffee[]
  locations        RoasterLocation[]
  favorites        UserFavorite[] @relation("RoasterFavorites")
}

model RoasterLocation {
  id          String   @id @default(cuid())
  name        String   // Location name (e.g., "Downtown", "Westside")
  address     String
  mapsLink    String?
  phoneNumber String?
  image       String?
  isMainLocation Boolean @default(false)
  roasterId   String
  roaster     CoffeeRoaster @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  createdBy   String   // userId
  updatedBy   String?  // userId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   UserFavorite[] @relation("LocationFavorites")
}

model Coffee {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?  // URL to the coffee image
  roasterId       String
  roaster         CoffeeRoaster @relation(fields: [roasterId], references: [id])
  countryOfOrigin String?
  elevation       String?
  process         String?
  createdBy       String   // userId
  updatedBy       String?  // userId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brewProfiles    BrewProfile[]
  tastingNotes    CoffeeTastingNote[] @relation("CoffeeToTastingNote")
  favorites       UserFavorite[] @relation("CoffeeFavorites")
}

model CoffeeTastingNote {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coffees   Coffee[] @relation("CoffeeToTastingNote")
}

model CoffeeOrigin {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoffeeProcess {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrewProfile {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  coffeeId        String
  coffee          Coffee   @relation(fields: [coffeeId], references: [id])
  brewDeviceId    String
  brewDevice      BrewingDevice @relation(fields: [brewDeviceId], references: [id])
  waterAmount     Float    // in grams
  coffeeAmount    Float    // in grams
  ratio           String   // e.g., "1:16"
  roasterNotes    String?
  tastingNotes    String?
  roastDate       DateTime?
  wash            String?
  process         String?
  roastLevel      String?
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brewSessions    UserBrewSession[] @relation("BrewProfileToUserBrewSession")
  favorites       UserFavorite[] @relation("BrewProfileFavorites")
}

// Model for user favorites
model UserFavorite {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityType      String   // "brew-profile", "coffee", "roaster", "location"
  entityId        String   // ID of the favorited entity
  createdAt       DateTime @default(now())

  // Relations to specific entities - using separate fields for each entity type
  brewProfileId   String?
  coffeeId        String?
  roasterId       String?
  locationId      String?

  // Define relations with map to avoid constraint name conflicts
  brewProfile     BrewProfile? @relation("BrewProfileFavorites", fields: [brewProfileId], references: [id], onDelete: Cascade)
  coffee          Coffee? @relation("CoffeeFavorites", fields: [coffeeId], references: [id], onDelete: Cascade)
  roaster         CoffeeRoaster? @relation("RoasterFavorites", fields: [roasterId], references: [id], onDelete: Cascade)
  location        RoasterLocation? @relation("LocationFavorites", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
}

