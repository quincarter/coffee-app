// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable connection pooling for Vercel serverless functions
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  password          String
  userRole              String   @default("user")
  image             String?
  backgroundImage   String?
  backgroundOpacity Float?   @default(0.8)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  brewingSessions   UserBrewSession[]
  brewingDevices    UserBrewingDevice[]
}

model BrewingDevice {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  UserBrewingDevice UserBrewingDevice[]

  UserBrewSession UserBrewSession[]
}

model UserBrewingDevice {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?  // Add this field
  userId          String
  brewingDeviceId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  brewingDevice BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  brewSessions UserBrewSession[]
}

model UserBrewSession {
  id              String   @id @default(uuid())
  name            String
  notes           String
  userId          String
  brewingDeviceId String
  brewTime        String   // Changed from Decimal to String to store "HH:MM:SS" format
  isFavorite      Boolean  @default(false)
  image           String?  // Added optional image field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  brewingDevice   BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  UserBrewingDevice UserBrewingDevice[]
}

