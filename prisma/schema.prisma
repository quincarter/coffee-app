// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable connection pooling for Vercel serverless functions
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  password          String
  userRole          String   @default("user")
  image             String?
  backgroundImage   String?
  backgroundOpacity Float?   @default(0.8)
  emailVerified     DateTime?
  verifyToken       String?   @unique
  verifyTokenExpires DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  passwordReset     PasswordReset?
  magicLinks        MagicLink[]

  // Relations
  brewingSessions   UserBrewSession[]
  brewingDevices    UserBrewingDevice[]
  brewProfiles      BrewProfile[]
  favorites         UserFavorite[]
  dismissedBanners  UserDismissedBanner[]
  coffees          Coffee[] @relation()
  updatedCoffees   Coffee[] @relation("UpdateUser")
  comments         Comment[] @relation("UserComments")
  commentLikes     CommentLike[] @relation("UserCommentLikes")

  // Feature Flag Relations
  createdFlags    FeatureFlag[] @relation("CreatedFlags")
  updatedFlags    FeatureFlag[] @relation("UpdatedFlags")
  featureFlagAccess FeatureFlagAccess[]
  notifications         Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("ActorNotifications")
  notificationSettings  NotificationSettings? @relation("UserNotificationSettings")
}

// Notification system models
model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  userId      String           // User who receives the notification
  actorId     String           // User who triggered the notification
  read        Boolean          @default(false)
  entityType  String           // "comment", "coffee", "brew-profile", "roaster"
  entityId    String           // ID of the related entity
  content     String?          // Optional content (e.g., comment text)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor       User             @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)

  // Optional relations to specific entities
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  coffee      Coffee?          @relation(fields: [coffeeId], references: [id], onDelete: Cascade)
  brewProfile BrewProfile?     @relation(fields: [brewProfileId], references: [id], onDelete: Cascade)
  roaster     CoffeeRoaster?   @relation(fields: [roasterId], references: [id], onDelete: Cascade)

  // Optional foreign keys for specific entities
  commentId   String?
  coffeeId    String?
  brewProfileId String?
  roasterId   String?

  @@index([userId])
  @@index([actorId])
  @@index([commentId])
  @@index([coffeeId])
  @@index([brewProfileId])
  @@index([roasterId])
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  commentNotifications  Boolean  @default(true)
  likeNotifications    Boolean  @default(true)
  favoriteNotifications Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user                 User     @relation("UserNotificationSettings", fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  COMMENT
  COMMENT_REPLY
  COMMENT_LIKE
  FAVORITE_COFFEE
  FAVORITE_BREW_PROFILE
  FAVORITE_ROASTER
}



// Banner system models
model AdminBanner {
  id          String   @id @default(cuid())
  title       String
  description String
  color       BannerColor @default(neutral)
  isActive    Boolean  @default(true)
  isDismissable Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dismissals  UserDismissedBanner[]
}

model UserDismissedBanner {
  id        String   @id @default(cuid())
  userId    String
  bannerId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  banner    AdminBanner @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, bannerId])
}

enum BannerColor {
  success
  info
  danger
  warning
  neutral
}

model BrewingDevice {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  UserBrewingDevice UserBrewingDevice[]
  UserBrewSession   UserBrewSession[]
  BrewSessionDevice BrewSessionDevice[]
  brewProfiles      BrewProfile[]
}

model UserBrewingDevice {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?
  userId          String
  brewingDeviceId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  brewingDevice BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  brewSessions UserBrewSession[]
}

model UserBrewSession {
  id              String   @id @default(uuid())
  name            String
  notes           String
  userId          String
  brewingDeviceId String
  brewTime        String   // Changed from Decimal to String to store "HH:MM:SS" format
  isFavorite      Boolean  @default(false)
  image           String?  // Added optional image field
  isPublic        Boolean  @default(false) // Add this field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  brewingDevice   BrewingDevice @relation(fields: [brewingDeviceId], references: [id])

  UserBrewingDevice UserBrewingDevice[]
  additionalDevices BrewSessionDevice[]
  brewProfileId     String?
  brewProfile       BrewProfile? @relation("BrewProfileToUserBrewSession", fields: [brewProfileId], references: [id])
}

// New model to support multiple brewing devices per session
model BrewSessionDevice {
  id              String   @id @default(cuid())
  brewSessionId   String
  brewingDeviceId String
  createdAt       DateTime @default(now())

  brewSession   UserBrewSession @relation(fields: [brewSessionId], references: [id], onDelete: Cascade)
  brewingDevice BrewingDevice   @relation(fields: [brewingDeviceId], references: [id])

  @@unique([brewSessionId, brewingDeviceId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CoffeeRoaster {
  id               String   @id @default(cuid())
  name             String
  address          String?  // Main address (will keep for backward compatibility)
  mapsLink         String?  // Main location maps link
  phoneNumber      String?  // Main phone number
  notes            String?
  image            String?  // Added image field
  website          String?  // Added website field
  hasSingleLocation Boolean @default(false) // Indicates if roaster has only one location (use main info)
  createdBy        String   // userId
  updatedBy        String?  // userId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  notifications Notification[] @relation()
  coffees          Coffee[]
  locations        RoasterLocation[]
  favorites        UserFavorite[] @relation("RoasterFavorites")
  comments         Comment[] @relation("RoasterComments")
}

model RoasterLocation {
  id          String   @id @default(cuid())
  name        String   // Location name (e.g., "Downtown", "Westside")
  address     String
  mapsLink    String?
  phoneNumber String?
  image       String?
  isMainLocation Boolean @default(false)
  roasterId   String
  roaster     CoffeeRoaster @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  createdBy   String   // userId
  updatedBy   String?  // userId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   UserFavorite[] @relation("LocationFavorites")
}

model Coffee {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?  // URL to the coffee image
  roasterId       String
  roaster         CoffeeRoaster @relation(fields: [roasterId], references: [id])
  countryOfOrigin String?
  elevation       String?
  process         String?
  productUrl      String?  // Link to coffee product page
  variety         CoffeeVariety? @default(single_origin) // Type of coffee
  isRetired      Boolean  @default(false) // Whether the coffee is retired/unavailable
  retiredAt      DateTime? // When the coffee was marked as retired
  createdBy       String   // userId
  updatedBy       String?  // userId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notifications Notification[] @relation()
  brewProfiles    BrewProfile[]
  tastingNotes    CoffeeTastingNote[] @relation("CoffeeToTastingNote")
  favorites       UserFavorite[] @relation("CoffeeFavorites")
  user            User     @relation(fields: [createdBy], references: [id])
  updateUser      User?    @relation("UpdateUser", fields: [updatedBy], references: [id])
  comments        Comment[] @relation("CoffeeComments")

  @@index([createdBy])
  @@index([updatedBy])
}

model CoffeeTastingNote {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coffees   Coffee[] @relation("CoffeeToTastingNote")
}

model CoffeeOrigin {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoffeeProcess {
  id        String   @id @default(cuid())
  name      String   @unique
  createdBy String   // userId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrewProfile {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  coffeeId        String
  coffee          Coffee   @relation(fields: [coffeeId], references: [id])
  brewDeviceId    String
  brewDevice      BrewingDevice @relation(fields: [brewDeviceId], references: [id])
  waterAmount     Float    // in grams
  coffeeAmount    Float    // in grams
  ratio           String   // e.g., "1:16"
  roasterNotes    String?
  tastingNotes    String?
  roastDate       DateTime?
  wash            String?
  process         String?
  roastLevel      String?
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notifications Notification[] @relation()
  brewSessions    UserBrewSession[] @relation("BrewProfileToUserBrewSession")
  favorites       UserFavorite[] @relation("BrewProfileFavorites")
  comments        Comment[] @relation("BrewProfileComments")
}

// Model for user favorites
model UserFavorite {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entityType      String   // "brew-profile", "coffee", "roaster", "location"
  entityId        String   // ID of the favorited entity
  createdAt       DateTime @default(now())

  // Relations to specific entities - using separate fields for each entity type
  brewProfileId   String?
  coffeeId        String?
  roasterId       String?
  locationId      String?

  // Define relations with map to avoid constraint name conflicts
  brewProfile     BrewProfile? @relation("BrewProfileFavorites", fields: [brewProfileId], references: [id], onDelete: Cascade)
  coffee          Coffee? @relation("CoffeeFavorites", fields: [coffeeId], references: [id], onDelete: Cascade)
  roaster         CoffeeRoaster? @relation("RoasterFavorites", fields: [roasterId], references: [id], onDelete: Cascade)
  location        RoasterLocation? @relation("LocationFavorites", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
}

// Comments System Models
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isEdited  Boolean  @default(false)
  
  // Relations
  userId    String  
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional parent comment for nested replies
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  // Entity relations
  coffeeId  String?
  coffee    Coffee?  @relation("CoffeeComments", fields: [coffeeId], references: [id], onDelete: Cascade)
  
  brewProfileId String?
  brewProfile   BrewProfile? @relation("BrewProfileComments", fields: [brewProfileId], references: [id], onDelete: Cascade)
  
  roasterId   String?
  roaster     CoffeeRoaster? @relation("RoasterComments", fields: [roasterId], references: [id], onDelete: Cascade)
  
  // Optional likes
  likes     CommentLike[] @relation("CommentLikes")
  notifications Notification[] @relation()

  @@index([userId])
  @@index([coffeeId])
  @@index([brewProfileId])
  @@index([roasterId])
  @@index([parentId])

  // Note: We enforce in application logic that exactly one of [coffeeId, brewProfileId, roasterId] must be set
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
}

enum CoffeeVariety {
  single_origin
  blend
  microlot
  seasonal
  signature_blend
}

// Feature Flag System
model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String?

  // Relations
  creator     User     @relation("CreatedFlags", fields: [createdBy], references: [id])
  updater     User?    @relation("UpdatedFlags", fields: [updatedBy], references: [id])
  access      FeatureFlagAccess[]

  // Allow access by role (e.g., "admin", "user") or specific users
  allowedRoles String[] @default([])

  @@index([createdBy])
  @@index([updatedBy])
}

model FeatureFlagAccess {
  id            String   @id @default(cuid())
  featureFlagId String
  userId        String
  createdAt     DateTime @default(now())

  // Relations
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([featureFlagId, userId])
  @@index([featureFlagId])
  @@index([userId])
}

